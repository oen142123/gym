plugins {
    id 'org.springframework.boot' version '2.4.4'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "org.asciidoctor.convert" version "1.5.9.2"
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id 'java'
}

group = 'com.wani'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}
repositories {
    mavenCentral()
}
ext {
    snippetsDir = file('build/generated-snippets')
    set('lombokVersion', "1.18.16")
}
dependencies {
    //security
    implementation "org.springframework.boot:spring-boot-starter-security"

    //querydsl
    implementation 'com.querydsl:querydsl-jpa'

    //mysql connector
    runtimeOnly 'mysql:mysql-connector-java'

    // cache(redis)
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'


    //validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'


    //open pdf
    implementation group: 'com.github.librepdf', name: 'openpdf', version: '1.3.25'
    // spring
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // handlebars
    implementation 'pl.allegro.tech.boot:handlebars-spring-boot-starter:0.3.0'

    // log
    implementation 'net.rakugakibox.spring.boot:logback-access-spring-boot-starter:2.7.1'

    // jgraph
    implementation 'org.jgrapht:jgrapht-core:1.0.1'

    // jwt
    implementation 'com.auth0:java-jwt:3.15.0'

    // rest docs
    asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor:2.0.5.RELEASE'
    testImplementation 'org.springframework.restdocs:spring-restdocs-restassured:2.0.5.RELEASE'

    testImplementation 'io.rest-assured:rest-assured:3.3.0'


    implementation 'org.springframework.boot:spring-boot-starter'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.springframework.security:spring-security-test"

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    runtimeOnly 'com.h2database:h2'

}


test {
    useJUnitPlatform()

    outputs.dir snippetsDir
}

task testDocument(type: Test) {
    useJUnitPlatform()
    filter {
        includeTestsMatching "*.documentation.*"
    }
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

bootJar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

task copyDocument(type: Copy) {
    dependsOn testDocument

    from file("build/asciidoc/html5/index.html")
    into file("src/main/resources/static/docs")
}

// qeury dsl
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}

sourceSets {
    main.java.srcDir querydslDir
}

configurations {
    querydsl.extendsFrom compileClasspath
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}